{"ast":null,"code":"var _jsxFileName = \"/Users/sriharikrishna/Desktop/NEHA_REACT/git-project/Neha-Aitharaju-Personal-Website/src/components/chatbotframe/Chatbotframe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./Chatbotframe.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from 'axios';\nimport { ClipLoader } from 'react-spinners';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbotframe() {\n  _s();\n  const [newMessageText, setNewMessageText] = useState(\"\");\n  const [fullyUp, setFullyUp] = useState(false); // set to true when chatbot is working\n  const [isLoading, setIsLoading] = useState(false);\n  const [outText, setOutText] = useState(\"Hello, I'm Neha's chatbot here to answer any questions about Neha! I was made using the OpenAI API & was deployed on a free deployment service. Do note that because of that, I might take a second to answer your first question. Fire away!\");\n  const API_URL = \"http://localhost:8080\";\n  useEffect(() => {\n    axios.post(`${API_URL}/chatbot`, {\n      ask: \"\"\n    }) // warming up the API in case it's been 15 mins since the last server activity\n    .then(response => {\n      console.log(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  const getAPIRes = async question => {\n    try {\n      const postData = {\n        ask: question + \" THIS IS REALLY IMPORTANT: Make sure to limit your response to strictly under 50 words/400 characters no matter what the question just was.\"\n      };\n      const response = await axios.post(`${API_URL}/chatbot`, postData);\n      const newRes = response.data.response;\n      if (newRes.length < 450) {\n        setOutText(newRes);\n      } else {\n        setOutText(\"Response is too long to be displayed, please reword your question.\");\n      }\n      setIsLoading(false);\n      console.log(response.data);\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = () => {\n    console.log(\"new message text,\", newMessageText);\n    if (isLoading || newMessageText.trim() === \"\") {\n      return;\n    }\n    if (newMessageText.length > 200) {\n      alert(\"Your question is too long\");\n      return;\n    }\n    setIsLoading(true);\n    getAPIRes(newMessageText.trim());\n    setNewMessageText(\"\");\n  };\n  const handleViewToggle = () => {\n    setFullyUp(!fullyUp);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: fullyUp ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInterface\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbotBanner\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bannerText\",\n          children: \"Neha's Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"circularButton\",\n          onClick: handleViewToggle,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowDown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-container\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(ClipLoader, {\n          color: \"#FFFFFF\",\n          loading: isLoading,\n          size: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"resText\",\n          children: outText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          placeholder: \"Type your message...\",\n          value: newMessageText,\n          onChange: e => setNewMessageText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: handleSendMessage,\n          children: \"Ask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInterfaceDown\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbotBanner\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bannerText\",\n          children: \"Neha's Chatbot - Coming Soon!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbotframe, \"cLMl+uLDjB6Hik9fK2D6m+vWb3Y=\");\n_c = Chatbotframe;\nexport default Chatbotframe;\nvar _c;\n$RefreshReg$(_c, \"Chatbotframe\");","map":{"version":3,"names":["React","useState","useEffect","classes","FontAwesomeIcon","faArrowUp","faArrowDown","axios","ClipLoader","jsxDEV","_jsxDEV","Chatbotframe","_s","newMessageText","setNewMessageText","fullyUp","setFullyUp","isLoading","setIsLoading","outText","setOutText","API_URL","post","ask","then","response","console","log","data","catch","error","getAPIRes","question","postData","newRes","length","handleSendMessage","trim","alert","handleViewToggle","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","color","loading","size","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/sriharikrishna/Desktop/NEHA_REACT/git-project/Neha-Aitharaju-Personal-Website/src/components/chatbotframe/Chatbotframe.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classes from \"./Chatbotframe.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from 'axios';\nimport { ClipLoader } from 'react-spinners';\n\nfunction Chatbotframe() {\n  const [newMessageText, setNewMessageText] = useState(\"\");\n  const [fullyUp, setFullyUp] = useState(false); // set to true when chatbot is working\n  const [isLoading, setIsLoading] = useState(false);\n  const [outText, setOutText] = useState(\"Hello, I'm Neha's chatbot here to answer any questions about Neha! I was made using the OpenAI API & was deployed on a free deployment service. Do note that because of that, I might take a second to answer your first question. Fire away!\")\n\n  const API_URL = \"http://localhost:8080\";\n\n  useEffect(() => {\n    axios.post(`${API_URL}/chatbot`, {ask: \"\"}) // warming up the API in case it's been 15 mins since the last server activity\n        .then((response) => {\n            console.log(response.data)\n        })\n        .catch((error) => {\n            console.error(error)\n        })\n  }, [])\n\n  const getAPIRes = async (question) => {\n    try {\n        const postData = {ask: question + \" THIS IS REALLY IMPORTANT: Make sure to limit your response to strictly under 50 words/400 characters no matter what the question just was.\"}\n        const response = await axios.post(`${API_URL}/chatbot`, postData);\n        const newRes = response.data.response;\n        if (newRes.length < 450) {\n          setOutText(newRes)\n        } else {\n          setOutText(\"Response is too long to be displayed, please reword your question.\")\n        }\n        setIsLoading(false)\n        console.log(response.data);\n      } catch (error) {\n        console.error(error);\n        setIsLoading(false)\n      }\n  }\n\n  const handleSendMessage = () => {\n    console.log(\"new message text,\", newMessageText);\n    if (isLoading || newMessageText.trim() === \"\") {\n      return;\n    }\n    if (newMessageText.length > 200) {\n      alert(\"Your question is too long\");\n      return;\n    }\n    setIsLoading(true);\n    getAPIRes(newMessageText.trim())\n    setNewMessageText(\"\");\n  };\n\n  const handleViewToggle = () => {\n    setFullyUp(!fullyUp);\n  };\n\n  return (\n    <div>\n      {fullyUp ? (\n        <div className=\"chatInterface\">\n          <div className=\"chatbotBanner\">\n            <p className=\"bannerText\">Neha's Chatbot</p>\n            <button className=\"circularButton\" onClick={handleViewToggle}>\n              <FontAwesomeIcon icon={faArrowDown} />\n            </button>\n          </div>\n          <div className=\"output-container\">\n            {\n                isLoading ? (\n                    <ClipLoader color=\"#FFFFFF\" loading={isLoading} size={50} />\n                ) : (\n                    <p className=\"resText\">{outText}</p>\n                )\n            }\n          </div>\n          <div className=\"input-container\"> {/* the input field & button here is what you need to style */}\n            <input\n              className=\"input\"\n              placeholder=\"Type your message...\"\n              value={newMessageText}\n              onChange={(e) => setNewMessageText(e.target.value)}\n            />\n            <button className=\"button\" onClick={handleSendMessage}>Ask</button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"chatInterfaceDown\">\n          <div className=\"chatbotBanner\">\n            <p className=\"bannerText\">Neha's Chatbot - Coming Soon!</p>\n            {/* <button className=\"circularButton\" onClick={handleViewToggle}>\n              <FontAwesomeIcon icon={faArrowUp} />\n            </button> */}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Chatbotframe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}